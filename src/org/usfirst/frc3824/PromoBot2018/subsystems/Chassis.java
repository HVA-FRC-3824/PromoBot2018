// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.PromoBot2018.subsystems;

import org.usfirst.frc3824.PromoBot2018.RobotMap;
import org.usfirst.frc3824.PromoBot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends Subsystem
{
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final SpeedController topLeftMotor = RobotMap.chassisTopLeftMotor;
	private final SpeedController midLeftMotor = RobotMap.chassisMidLeftMotor;
	private final SpeedController botLeftMotor = RobotMap.chassisBotLeftMotor;
	private final SpeedControllerGroup leftDrive = RobotMap.chassisLeftDrive;
	private final SpeedController topRightMotor = RobotMap.chassisTopRightMotor;
	private final SpeedController midRightMotor = RobotMap.chassisMidRightMotor;
	private final SpeedController botRightMotor = RobotMap.chassisBotRightMotor;
	private final SpeedControllerGroup rightDrive = RobotMap.chassisRightDrive;
	private final DifferentialDrive differentialDrive = RobotMap.chassisDifferentialDrive;
	private final Compressor compressor = RobotMap.chassisCompressor;
	private final Solenoid transmission = RobotMap.chassisTransmission;
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	@Override
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		
		setDefaultCommand(new TeleopDrive());
		
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	@Override
	public void periodic()
	{
		// Put code here to be run every loop
	}
	
	public void driveWithJoystick(Joystick joystick)
	{
		// XBox Controller
		// differentialDrive.arcadeDrive(joystick.getRawAxis(2),
		// joystick.getRawAxis(4), true);
		
		// Gaming Joystick
		differentialDrive.arcadeDrive(joystick.getY(), joystick.getTwist(), true);
	}
	
	public void shiftGears(boolean high)
	{
		transmission.set(high);
	}
	
}
