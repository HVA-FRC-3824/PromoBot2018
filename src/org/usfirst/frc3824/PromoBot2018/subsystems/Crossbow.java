// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.PromoBot2018.subsystems;

import org.usfirst.frc3824.PromoBot2018.Constants;
import org.usfirst.frc3824.PromoBot2018.RobotMap;
import org.usfirst.frc3824.PromoBot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 *
 */
public class Crossbow extends Subsystem
{
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	private final WPI_TalonSRX rotator = RobotMap.crossbowRotator;
	
	private double crossbowRotatorPID_F;
	private double crossbowRotatorPID_P;
	private double crossbowRotatorPID_I;
	private double crossbowRotatorPID_D;
	
	private int crossbowRotatorCruiseVelocity;
	private int crossbowRotatorAcceleration;
	
	private double crossbowRotatorCurrentSetpoint;
	
	public Crossbow()
	{
		crossbowRotatorPID_F = Constants.CROSSBOW_ROTATOR_PID_F;
		crossbowRotatorPID_P = Constants.CROSSBOW_ROTATOR_PID_P;
		crossbowRotatorPID_I = Constants.CROSSBOW_ROTATOR_PID_I;
		crossbowRotatorPID_D = Constants.CROSSBOW_ROTATOR_PID_D;
		
		crossbowRotatorCruiseVelocity = Constants.CROSSBOW_ROTATOR_CRUISE_VELOCITY;
		crossbowRotatorAcceleration = Constants.CROSSBOW_ROTATOR_ACCELERATION;
		
		rotator.set(ControlMode.MotionMagic, 0);
		rotator.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0,
				Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.setSensorPhase(true);
		
		rotator.configNominalOutputForward(0, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.configNominalOutputReverse(0, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.configPeakOutputForward(Constants.CROSSBOW_ROTATOR_PID_MAX,
				Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.configPeakOutputReverse(Constants.CROSSBOW_ROTATOR_PID_MIN,
				Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		
		rotator.config_kF(0, crossbowRotatorPID_F, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.config_kP(0, crossbowRotatorPID_P, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.config_kI(0, crossbowRotatorPID_I, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.config_kD(0, crossbowRotatorPID_D, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		
		rotator.configMotionCruiseVelocity(crossbowRotatorCruiseVelocity,
				Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.configMotionAcceleration(crossbowRotatorAcceleration, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		
		// Ensure the intake wheels are not moving
		stopRotator();
	}
	
	@Override
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	@Override
	public void periodic()
	{
		// Put code here to be run every loop
		
	}
	
	/*********************************************************************
	 * Returns error of PID algorithm for the crossbow rotator controller
	 *********************************************************************/
	public double getRotatorError()
	{
		return rotator.getClosedLoopError(0);
	}
	
	/*********************************************************************
	 * Returns percent of maximum output of crossbow rotator motor
	 *********************************************************************/
	public double getRotatorPercent()
	{
		return rotator.getMotorOutputPercent();
	}
	
	/*********************************************************************
	 * Returns current control mode of Talon SRX for crossbow rotator
	 *********************************************************************/
	public ControlMode getRotatorControlMode()
	{
		return rotator.getControlMode();
	}
	
	/*********************************************************************
	 * Returns current setpoint being targeted for the crossbow rotator
	 *********************************************************************/
	public double getRotatorSetpoint()
	{
		// Return the PID setpoint
		// Note: Saved as a local variable since we don't know how to read the
		// setpoint
		// from the talon SRX motor controllers
		return crossbowRotatorCurrentSetpoint;
	}
	
	/*********************************************************************
	 * Returns current velocity of crossbow rotator in terms of encoder values
	 *********************************************************************/
	public double getRotatorVelocity()
	{
		return rotator.getSelectedSensorVelocity(0);
	}
	
	/*********************************************************************
	 * Returns current angle of rotator as an encoder value
	 *********************************************************************/
	public double getRotatorPositionEncoder()
	{
		return rotator.getSelectedSensorPosition(0);
	}
	
	/*********************************************************************
	 * Returns current angle of rotator as an angle in degrees
	 *********************************************************************/
	public double getRotatorPositionAngle()
	{
		double positionAngle;
		
		// Convert the encoder value to degrees
		positionAngle = (rotator.getSelectedSensorPosition(0) - Constants.CROSSBOW_ROTATOR_ENCODER_TO_ANGLE_Y_INT)
				* (90.0 / Constants.CROSSBOW_ROTATOR_ENCODER_TO_ANGLE_Y_INT);
		
		// Return the rotator's angle in degrees
		return positionAngle;
	}
	
	/*********************************************************************
     * Uses PIDs with Talon SRX encoder feedback to set the position of the crossbow rotator to a specified angle in degrees
     *********************************************************************/
    public void setRotatorPositionAngle(double positionAngle)
    {
        if (positionAngle < Constants.CROSSBOW_ROTATOR_MIN_ANGLE)
        {
            positionAngle = Constants.CROSSBOW_ROTATOR_MIN_ANGLE;
        } 
        else if (positionAngle > Constants.CROSSBOW_ROTATOR_MAX_ANGLE)
        {
            positionAngle = Constants.CROSSBOW_ROTATOR_MAX_ANGLE;
        }

        // Calculate the encoder value from the angle in degrees
        double calculatedPosition = (positionAngle * (Constants.CROSSBOW_ROTATOR_ENCODER_TO_ANGLE_Y_INT / 90))
        		+ Constants.CROSSBOW_ROTATOR_ENCODER_TO_ANGLE_Y_INT;
        
        // Remember the PID setpoint
        crossbowRotatorCurrentSetpoint = calculatedPosition;
        
        // Set the PID intake angle as an encoder value
        rotator.set(ControlMode.MotionMagic, crossbowRotatorCurrentSetpoint);
        
        SmartDashboard.putNumber("Calculated Encoder Value", calculatedPosition);
    }
	
	/*********************************************************************
	 * Stops rotator motor on crossbow
	 *********************************************************************/
	public void setRotatorPositionEncoder(double setpoint)
	{
		// Remember current setpoint for access outside of this class
		crossbowRotatorCurrentSetpoint = setpoint;
		
		// Set setpoint
		rotator.set(ControlMode.MotionMagic, crossbowRotatorCurrentSetpoint);
	}
	
	/*********************************************************************
	 * Resets rotator sensor encoder value to 0
	 *********************************************************************/
	public void resetAnglePosition()
	{
		rotator.setSelectedSensorPosition(0, 0, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
	}
	
	/*********************************************************************
	 * Stops rotator motor on crossbow
	 *********************************************************************/
	public void stopRotator()
	{
		rotator.set(0.0);
	}
	
	/*********************************************************************
	 * Sets FPID values, cruise velocity, and acceleration for crossbow rotator
	 *********************************************************************/
	public void setRotatorParameters()
	{
		crossbowRotatorPID_F = SmartDashboard.getNumber("Crossbow Rotator F", Constants.CROSSBOW_ROTATOR_PID_F);
		crossbowRotatorPID_P = SmartDashboard.getNumber("Crossbow Rotator P", Constants.CROSSBOW_ROTATOR_PID_P);
		crossbowRotatorPID_I = SmartDashboard.getNumber("Crossbow Rotator I", Constants.CROSSBOW_ROTATOR_PID_I);
		crossbowRotatorPID_D = SmartDashboard.getNumber("Crossbow Rotator D", Constants.CROSSBOW_ROTATOR_PID_D);
		
		crossbowRotatorCruiseVelocity = (int) SmartDashboard.getNumber("Crossbow Rotator Cruise Velocity",
				Constants.CROSSBOW_ROTATOR_CRUISE_VELOCITY);
		crossbowRotatorAcceleration = (int) SmartDashboard.getNumber("Crossbow Rotator Acceleration",
				Constants.CROSSBOW_ROTATOR_ACCELERATION);
		
		rotator.config_kF(0, crossbowRotatorPID_F, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.config_kP(0, crossbowRotatorPID_P, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.config_kI(0, crossbowRotatorPID_I, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.config_kD(0, crossbowRotatorPID_D, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		
		rotator.configMotionCruiseVelocity(crossbowRotatorCruiseVelocity,
				Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
		rotator.configMotionAcceleration(crossbowRotatorAcceleration, Constants.TALON_INITIAL_COMMUNICATION_TIMEOUT);
	}
	
}
